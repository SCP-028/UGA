{
cvfit <- cv.glmnet(x,y)
GLMdata[[i]] <- as.matrix(coef(cvfit, s = "lambda.min"))
}
}
ncol(datan)
col(methyn)
ncol(methyn)
foreach(i =1:100) %dopar%
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
x <- as.matrix(methyn[rownames(methyn) %in% annot[annot[ ,2] == colnames(y),1], ])
x <- t(x)
class(x) <- "numeric"
if (ncol(x) >= 2)
{
cvfit <- cv.glmnet(x,y)
GLMdata[[i]] <- as.matrix(coef(cvfit, s = "lambda.min"))
}
}
GLMdata[[1]] <- 1
GLMdata[[3]] <- 1
for(i in 1:20)
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
x <- as.matrix(methyn[rownames(methyn) %in% annot[annot[ ,2] == colnames(y),1], ])
x <- t(x)
class(x) <- "numeric"
if (ncol(x) >= 2)
{
cvfit <- cv.glmnet(x,y)
GLMdata[[i]] <- as.matrix(coef(cvfit, s = "lambda.min"))
}
}
warnings()
load("~/data/DNA_Methylation/Methy_ZhouYi/RData/Glmnet/normal.RData")
library(glmnet)
for(i in 1:100)
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
x <- as.matrix(methyn[rownames(methyn) %in% annot[(annot[ ,2] == colnames(y)),1], ])
x <- t(x)
class(x) <- "numeric"
if (ncol(x) >= 2)
{
cvfit <- cv.glmnet(x,y)
GLMdata[[i]] <- as.matrix(coef(cvfit, s = "lambda.min"))
}
}
library(glmnet)
for(i in 1:100)
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
x <- as.matrix(methyn[rownames(methyn) %in% annot[(annot[ ,2] == colnames(y)),1], ])
x <- t(x)
class(x) <- "numeric"
if (ncol(x) >= 2)
{
cvfit <- cv.glmnet(x,y)
GLMdata[[i]] <- as.matrix(coef(cvfit, s = "lambda.min"))
}
}
View(y)
View(x)
library(glmnet)
for(i in 1:100)
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
x <- as.matrix(methyn[rownames(methyn) %in% annot[(annot[ ,2] == colnames(y)),1], ])
if(nrow(x)>= 2){x <- t(x)
class(x) <- "numeric"
cvfit <- cv.glmnet(x,y)
GLMdata[[i]] <- as.matrix(coef(cvfit, s = "lambda.min"))
}
}
View(x)
View(y)
load("~/data/DNA_Methylation/Methy_ZhouYi/RData/Glmnet/normal.RData")
library(glmnet)
library(foreach)
library(doMC)
registerDoMC(1)
y <- as.matrix(datan[82, ])
colnames(y) <- rownames(datan)[82]
x <- as.matrix(methyn[rownames(methyn) %in% annot[annot[ ,2] == colnames(y),1], ])
if(nrow(x) >= 2)
{
x <- t(x)
class(x) <- "numeric"
cvfit <- cv.glmnet(x,y)
as.matrix(coef(cvfit, s = "lambda.min"))
}
View(x)
y <- as.matrix(datan[82, ])
colnames(y) <- rownames(datan)[82]
x <- as.matrix(methyn[rownames(methyn) %in% annot[annot[ ,2] == colnames(y),1], ])
nrow(x)
methyn[rownames(methyn) %in% annot[annot[ ,2] == colnames(y),1], ]
methyn[rownames(methyn) %in% annot[(annot[ ,2] == colnames(y)),1], ]
rownames(methyn)
annot[ ,2][1:10]
View(annot)
annot[(annot[ ,2] == colnames(y)),1], ]
annot[(annot[ ,2] == colnames(y)),1]
GLMdata <- foreach(i =50:90) %dopar%
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
x <- as.matrix(methyn[rownames(methyn) %in% annot[(annot[ ,2] == colnames(y)),1], ])
if(nrow(x) >= 2)
{
x <- t(x)
class(x) <- "numeric"
cvfit <- cv.glmnet(x,y)
as.matrix(coef(cvfit, s = "lambda.min"))
}
else
{
cor.test(t(x),y)
}
}
warnings()
GLMdata <- foreach(i =1:100) %dopar%
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
x <- as.matrix(methyn[rownames(methyn) %in% annot[(annot[ ,2] == colnames(y)),1], ])
if(nrow(x) >= 2)
{
x <- t(x)
class(x) <- "numeric"
cvfit <- cv.glmnet(x,y)
as.matrix(coef(cvfit, s = "lambda.min"))
}
else rownames(x)
}
View(x)
GLMdata <- foreach(i =1:100) %:% when (nrow(x) >= 2) %dopar%
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
x <- as.matrix(methyn[rownames(methyn) %in% annot[(annot[ ,2] == colnames(y)),1], ])
x <- t(x)
class(x) <- "numeric"
cvfit <- cv.glmnet(x,y)
as.matrix(coef(cvfit, s = "lambda.min"))
}
y <- as.matrix(datan[82, ])
colnames(y) <- rownames(datan)[82]
x <- as.matrix(methyn[rownames(methyn) %in% annot[(annot[ ,2] == colnames(y)),1], ])
View(y)
View(x)
annot[(annot[ ,2] == colnames(y)),1]
methyn[rownames(methyn) %in% annot[(annot[ ,2] == colnames(y)),1], ]
z <- annot[(annot[ ,2] == colnames(y)),1]
z
y <- as.matrix(datan[81, ])
z <- annot[(annot[ ,2] == colnames(y)),1]
z
z <- as.matrix(annot[(annot[ ,2] == colnames(y)),1])
z <- as.matrix(annot[(annot[ ,2] %in% colnames(y)),1])
z <- as.matrix(annot[(annot[ ,2] eq colnames(y)),1])
xxx == "xxx"
"xxx" == "xxx"
z <- annot[(annot[ ,2] == colnames(y)),1]
View(y)
colnames(y) <- rownames(datan)[81]
View(y)
z <- annot[(annot[ ,2] == colnames(y)),1]
z
annot[(annot[ ,2] == colnames(y)),1]
colnames(y)
annot[,2] == colnames(y)
z <- annot[annot[,2] == colnames(y), ]
View(z)
y <- as.matrix(datan[82, ])
colnames(y) <- rownames(datan)[82]
z <- annot[(annot[ ,2] == colnames(y)),1]
z <- list(annot[(annot[ ,2] == colnames(y)),1])
z[1]
z[2]
z[3]
annot[(annot[ ,2] == colnames(y)),1]
z <- as.character(annot[(annot[ ,2] == colnames(y)),1])
x <- as.matrix(methyn[rownames(methyn) %in% z, ])
View(x)
rownames(x) <- z
colnames(x) <- z
View(x)
nrow(x) >= 2
y <- as.matrix(datan[1, ])
colnames(y) <- rownames(datan)[1]
z <- as.character(annot[(annot[ ,2] == colnames(y)),1])
x <- as.matrix(methyn[rownames(methyn) %in% z, ])
View(x)
colnames(x) <- z
length(z)
x <- t(x)
View(x)
View(y)
cvfit <- cv.glmnet(x,y)
plot(cvfit)
GLMdata <- foreach(i =1:100) %dopar%
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
z <- as.character(annot[(annot[ ,2] == colnames(y)),1])
x <- as.matrix(methyn[rownames(methyn) %in% z, ])
if(nrow(x) == 1) z
else if(nrow(x) >= 2)
{
x <- t(x)
class(x) <- "numeric"
cvfit <- cv.glmnet(x,y)
as.matrix(coef(cvfit, s = "lambda.min"))
}
else 0
}
y <- as.matrix(datan[82, ])
colnames(y) <- rownames(datan)[82]
z <- as.character(annot[(annot[ ,2] == colnames(y)),1])
x <- as.matrix(methyn[rownames(methyn) %in% z, ])
View(x)
GLMdata <- foreach(i =1:100) %dopar%
{
y <- as.matrix(datan[i, ])
colnames(y) <- rownames(datan)[i]
z <- as.character(annot[(annot[ ,2] == colnames(y)),1])
x <- as.matrix(methyn[rownames(methyn) %in% z, ])
if(nrow(x) == 1 | ncol(x) == 1) z
else if(nrow(x) >= 2)
{
x <- t(x)
class(x) <- "numeric"
cvfit <- cv.glmnet(x,y)
as.matrix(coef(cvfit, s = "lambda.min"))
}
else 0
}
GLMdata == 0
GLMdata[[1:100]] == 0
GLMdata[1:100] == 0
GLMdata[1:100]
cor.test(x,y)
GLMdata[[1]] <- cor.test(x,y)
GLMdata[[1]]
library(TCGAbiolinks)
library(foreach)
library(doMC)
registerDoMC(1)
query <- list()
a <- c("TCGA-BLCA","TCGA-GBM","TCGA-BRCA","TCGA-LUAD","TCGA-UCEC","TCGA-LUSC","TCGA-STAD","TCGA-COAD","TCGA-READ")
foreach(i=1:length(a)) %dopar%
{
query[[i]] <- GDCquery(project = a[i],data.category = "DNA methylation",data.type = "Methylation percentage",legacy = T)
GDCdownload(query[[i]])
}
library(GenomicFeatures)
hg19 <- makeTxDbFromUCSC(genome = "hg19", tablename = "refGene")
typeof(hg19)
class(hg19)
class(speciesMap)
head(speciesMap)
sizeof(hg19)
tail(speciesMap)
q()
source("https://bioconductor.org/biocLite.R")
biocLite("GEOquery")
?glmnet
library(glmnet)
?glmnet
??glmnet
library(GEOquery)
?GEOquery
??GEOquery
gsm <- getGEO(filename=system.file("extdata/GSM11805.txt.gz",package="GEOquery"))
warnings()
head(Meta(gsm))
head(gsm)
df <- Table(gsm)
head(df)
View(df)
GSMlist(gsm)[[1]]
GSMList(gsm)[[1]]
GSMList(gsm)
gse <- getGEO(filename=system.file("extdata/GSE781_family.soft.gz",package="GEOquery"))
df <- GSMList(gse)
df[[1]]
df[[2]]
library(glmnet)
data(QuickStartExample)
fit <- cv.glmnet(x,y)
levels(fit)
fit
df <- fit$glmnet.fit
df
plot(fit)
coef(fit, s = "lambda.min")
help("glmnet.control")
scoreMatrix <- matrix(nrow = 14, ncol = 15)
colnames(scoreMatrix) <- c("-", "R", "L", "V", "A", "T", "P", "G", "Q", "R", "T", "S", "P", "N", "R")  # Sequence 1
rownames(scoreMatrix) <- c("-", "K", "V", "G", "T", "S", "P", "A", "N", "K", "A", "T", "Q", "R")  # Sequence 2
gapPenalty = -1
matchPair = 4
mismatchPair = -2  # Scores
match.diagonal <- function(df, i, j)
{
if (rownames(df)[i] == colnames(df)[j])
return(as.numeric(df[i-1,j-1]) + matchPair)
else
return(as.numeric(df[i-1,j-1]) + mismatchPair)
}
seq1.gap <- function(df, i ,j)
return(as.numeric(df[i-1,j]) + gapPenalty)
seq2.gap <- function(df, i, j)
return(as.numeric(df[i,j-1]) + gapPenalty)
global.alignment <- function(df)
{
df[1, ] <- mismatchPair * 0:(ncol(df) - 1)
df[ ,1] <- mismatchPair * 0:(nrow(df) - 1)  # Matrix initialization
for (i in 2:nrow(df))
{
for (j in 2:ncol(df))
{
df[i,j] <- max(match.diagonal(df, as.numeric(i), as.numeric(j)),
seq1.gap(df, as.numeric(i), as.numeric(j)),
seq2.gap(df, as.numeric(i), as.numeric(j)))
}
}
return(df)
}
local.alignment <- function(df)
{
df[1, ] <- rep(0,ncol(df))
df[ ,1] <- rep(0,nrow(df))
for (i in 2:nrow(df))  # Global Alignment
{
for (j in 2:ncol(df))
{
df[i,j] <- max(match.diagonal(df, as.numeric(i), as.numeric(j)),
seq1.gap(df, as.numeric(i), as.numeric(j)),
seq2.gap(df, as.numeric(i), as.numeric(j)),
0)
}
}
return(df)
}
globalMatrix <- global.alignment(scoreMatrix)
localMatrix <- local.alignment(scoreMatrix)
write.table(localMatrix, "~/Documents/BINF 8210/2/localMatrix.txt")
library(TCGAbiolinks)
devtools::install_github(repo = "BioinformaticsFMRP/TCGAbiolinks")
load("/home/yi/data/DNA_Methylation/Methy_array/RData/Glmnet/GLM_normal_CV.RData")
normal <- GLMdata
load("/home/yi/data/DNA_Methylation/Methy_array/RData/Glmnet/GLM_cancer_CV.RData")
cancer <- GLMdata
rm(GLMdata)
ls()
ls()[1]
class(ls()[1])
a <- normal[[1]]
levels(a)
?levels
?lapply
a
a$nzero
lapply(a, function(x) print(x[x$nzero == 3]))
lapply(a, function(x) print(x))
lapply(a, function(x) print(x$nzero))
print(a$nzero)
lapply(a, function(x) print(x[6]))
a[1]
a[2]
a[3]
a[4]
a[5]
a[6]
print(a[6])
a[6][1]
b <- a[6]
b <- as.matrix(b)
View(b)
b <- as.matrix(a[6], sep = " ")
b <- unlist(a[6])
b <- matrix(unlist(a[6]))
b <- matrix(unlist(a[6]), byrow = T)
View(b)
b <- matrix(unlist(a[6], use.names = T))
View(b)
a
load("/home/yi/data/DNA_Methylation/Methy_array/RData/Glmnet/Raw_Data/normal.RData")
length(nromal)
length(normal)
nrow(datan)
View(methyn)
b <- lapply(normal[[1:10]], length)
b <- lapply(normal[[1]], length)
b
length(b)
b[6]
b <- lapply(normal, names)
b[1:10]
a <- lpply(b, length)
a <- lapply(b, length)
a
lapply(a, function(x) ifelse(x != 10, print(x), next()))
head(annot)
rm(a, b,GLMdata)
a <- lapply(normal[1], function(x) x[x[6] == 3])
normal[[1]][6]
a <- lapply(normal[[1]], function(x) x[x[6] == 3])
function(x) x==3
normal[1]
normal[1][6]
normal[1[6]]
a <- normal[1]
a[6]
a[5]
a <- normal[[1]]
a <- lapply(normal, function(x) lapply(x, x[6] == 3))
a <- normal[1]
a[1][6]
1[6]
a
a[1]
a[2]
a[1][1]
a[1[1]]
a[1]$nobs
a$nobs
a <- normal[[1]]
a$beta
a[1]
a[2]
a[3]
a[4]
a[5]
a[7]
a[8]
a$glmnet.fit$beta
a[8][2]
a[8]
class(a[8])
class(a[7])
a[7]
b <- unlist(a$glmnet.fit)
class(b)
a <- normal[1][1:3]
a
a[2]
a[1][1]
a[1][2]
class()
class(a)
levels(a)
typeof(a)
b <- a[][1]
b
rm(a,b)
normal[][1]
a <- lapply(normal, function(x) lapply(x, names))
a[1]
a[[1]]
load("/home/yi/data/DNA_Methylation/Methy_array/RData/Glmnet/GLM_normal_CV.RData")
load("/home/yi/data/DNA_Methylation/Methy_array/RData/piano/cluster.RData")
x <- rownames(normalCluster[normalCluster[ ,1] <= 0.05, ])
write.csv(x, "~/data/DNA_Methylation/Methy_array/RData/piano/normal.txt")
x <- rownames(tumorCluster[normalCluster[ ,1] <= 0.05, ])
write.csv(x, "~/data/DNA_Methylation/Methy_array/RData/piano/tumor.txt")
library(benchmarkme)
res <- benchmark_std()
plot(res)
upload_results(res)
get_datatable(res)
View(res)
setwd("/home/yi/SCP-028/DNA_Methylation/LINE1/plot")
df <- read.table("resultTable.txt")
View(df)
normal <- as.numeric(df$percentage[df$type == "normal"])
tumor <- as.numeric(df$percentage[df$type == "tumor"])
normal <- data.frame(Group = "Normal", Value = normal)
tumor <- data.frame(Group = df$project[df$type == "tumor"], Value = tumor)
View(tumor)
View(normal)
View(tumor)
plot.data <- rbind(normal,tumor)
View(plot.data)
class(plot.data$Value) <- "numeric"
ggplot(plot.data, aes(x = Group, y = Value, fill = Group))+
geom_boxplot()+
labs(title = paste("LINE1", "percent", sep = "_"))
library(ggplot2)
ggplot(plot.data, aes(x = Group, y = Value, fill = Group))+
geom_boxplot()+
labs(title = paste("LINE1", "percent", sep = "_"))
ggsave("result_percentage.png", path = "./")
normal <- as.numeric(df$mCG[df$type == "normal"])
tumor <- as.numeric(df$mCG[df$type == "tumor"])
normal <- data.frame(Group = "Normal", Value = normal)
tumor <- data.frame(Group = df$project[df$type == "tumor"], Value = tumor)
plot.data <- rbind(normal,tumor)
View(plot.data)
class(plot.data$Value) <- "numeric"
ggplot(plot.data, aes(x = Group, y = Value, fill = Group))+
geom_boxplot()+
labs(title = paste("LINE1", "mCG", sep = "_"))
ggsave("result_mCG.png", path = "./")
